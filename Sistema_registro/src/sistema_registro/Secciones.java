/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema_registro;

import codigo.Conexion_consulta;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import sistema_registro.SQL.ConectorSQL;

/**
 *
 * @author William P.
 */
public class Secciones extends javax.swing.JFrame {

    Connection con = null;
     String titulos [] = {"Id Seccion","Nombre de la Seccion", " Codigo de la Seccion ", "Cantidad Alumnos","Hora Inicial", "Hora Final", "Aula", "Periodo","Dias de la Asignatura"};
   
    DefaultTableModel modelo =  new DefaultTableModel();
    Statement stmt = null;
    String var, var2;
    int Contador=0;
    String CantidadAl =String.valueOf(Contador);
    
    
    //JCheckBox Mensaje = new JCheckBox();
    
    /**
     * Creates new form Secciones
     */
    
        
    String Mensaje = "";
    
    public Secciones() throws SQLException {
        
        this.con = ConectorSQL.obtenerConexion ();
        initComponents();
        
          
                ArrayList<String> lista = new ArrayList<String>();
             lista = new Conexion_consulta().llenar_asignatura();
            for(int i = 0; i<lista.size();i++){
                cbo_Asignaturas.addItem(lista.get(i));
                }
            
                 ArrayList<String> lista4 = new ArrayList<String>();
             lista4= new Conexion_consulta().llenar_periodo();
            for(int i = 0; i<lista4.size();i++){
               cbo_IdPeriodo.addItem(lista4.get(i));
             }
            
            
               ArrayList<String> lista5 = new ArrayList<String>();
             lista5= new Conexion_consulta().llenar_aula();
            for(int i = 0; i<lista5.size();i++){
               cbo_IdAula.addItem(lista5.get(i));
             }                    
             this.setIconImage(new ImageIcon(getClass().getResource("/Imagenes/Titulo.png")).getImage());
            this.setTitle("Secciones");
    }

    private Secciones(JTextField txt_NombreSeccion, String string) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_horaFinal = new javax.swing.JLabel();
        txt_NombreSeccion = new javax.swing.JTextField();
        btn_guardar = new javax.swing.JButton();
        btn_actualizar = new javax.swing.JButton();
        lbl_NombreSeccion = new javax.swing.JLabel();
        lbl_CodAsignatura = new javax.swing.JLabel();
        lbl_horaInicial = new javax.swing.JLabel();
        btn_eliminar = new javax.swing.JButton();
        lbl_aula = new javax.swing.JLabel();
        lbl_titulo = new javax.swing.JLabel();
        lbl_Periodo = new javax.swing.JLabel();
        btn_buscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla_Seccion = new javax.swing.JTable();
        cbo_IdPeriodo = new javax.swing.JComboBox<>();
        cbo_Asignaturas = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        chb_Lunes = new javax.swing.JCheckBox();
        chb_Martes = new javax.swing.JCheckBox();
        chb_Miercoles = new javax.swing.JCheckBox();
        chb_Jueves = new javax.swing.JCheckBox();
        chb_Viernes = new javax.swing.JCheckBox();
        chb_Sabado = new javax.swing.JCheckBox();
        chb_Domingo = new javax.swing.JCheckBox();
        lbl_MensajeDias = new javax.swing.JLabel();
        btn_Aceptar = new javax.swing.JButton();
        cbo_IdAula = new javax.swing.JComboBox<>();
        lbl_IdSeccion = new javax.swing.JLabel();
        txt_IdSeccion = new javax.swing.JTextField();
        txt_HoraInicial = new javax.swing.JFormattedTextField();
        txt_HoraFinal = new javax.swing.JFormattedTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_Asignatura = new javax.swing.JMenuItem();
        jMenuItem_Periodo = new javax.swing.JMenuItem();
        jMenuItem_Aula = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_horaFinal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_horaFinal.setText("Hora final:");

        txt_NombreSeccion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_NombreSeccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_NombreSeccionKeyTyped(evt);
            }
        });

        btn_guardar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/botton_Guardar.png"))); // NOI18N
        btn_guardar.setText("Guardar");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        btn_actualizar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_actualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/botton_Actualizar.png"))); // NOI18N
        btn_actualizar.setText("Actualizar");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        lbl_NombreSeccion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_NombreSeccion.setText("Nombre sección:");

        lbl_CodAsignatura.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_CodAsignatura.setText("Codigo Asignatura:");

        lbl_horaInicial.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_horaInicial.setText("Hora inicial:");

        btn_eliminar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/botton_Eliminar.png"))); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        lbl_aula.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_aula.setText("Aula: ");

        lbl_titulo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbl_titulo.setText("Registro de sección");

        lbl_Periodo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_Periodo.setText("Periodo:");

        btn_buscar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/botton_Consulta.png"))); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_buscarMouseClicked(evt);
            }
        });
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        Tabla_Seccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre Seccion", "Cod Asignatura", "Cantidad Alumnos", "Hora Inicial", "Hora Final", "Periodo", "Aula", "Dias"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla_Seccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tabla_SeccionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla_Seccion);

        cbo_IdPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un periodo:" }));
        cbo_IdPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbo_IdPeriodoActionPerformed(evt);
            }
        });

        cbo_Asignaturas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una asignatura:" }));
        cbo_Asignaturas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cbo_AsignaturasKeyTyped(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Dias de Asignaturas"));

        chb_Lunes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chb_Lunes.setText("Lunes");

        chb_Martes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chb_Martes.setText("Martes");
        chb_Martes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chb_MartesActionPerformed(evt);
            }
        });

        chb_Miercoles.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chb_Miercoles.setText("Miércoles");

        chb_Jueves.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chb_Jueves.setText("Jueves");

        chb_Viernes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chb_Viernes.setText("Viernes");

        chb_Sabado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chb_Sabado.setText("Sábado");

        chb_Domingo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chb_Domingo.setText("Domingo");
        chb_Domingo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chb_DomingoActionPerformed(evt);
            }
        });

        lbl_MensajeDias.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_Aceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/check.png"))); // NOI18N
        btn_Aceptar.setText("Aceptar");
        btn_Aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chb_Lunes)
                            .addComponent(chb_Jueves))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chb_Domingo)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chb_Martes)
                                    .addComponent(chb_Viernes))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chb_Sabado)
                                    .addComponent(chb_Miercoles))))
                        .addGap(0, 20, Short.MAX_VALUE))
                    .addComponent(lbl_MensajeDias, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_Aceptar)
                .addGap(149, 149, 149))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chb_Lunes)
                    .addComponent(chb_Martes)
                    .addComponent(chb_Miercoles))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chb_Jueves)
                    .addComponent(chb_Viernes)
                    .addComponent(chb_Sabado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chb_Domingo)
                .addGap(47, 47, 47)
                .addComponent(lbl_MensajeDias, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_Aceptar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cbo_IdAula.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un aula:" }));

        lbl_IdSeccion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_IdSeccion.setText("Id sección:");

        txt_IdSeccion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_IdSeccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_IdSeccionKeyTyped(evt);
            }
        });

        txt_HoraInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));

        txt_HoraFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        txt_HoraFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_HoraFinalActionPerformed(evt);
            }
        });

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/menu.png"))); // NOI18N
        jMenu1.setText("Menú");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem_Asignatura.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Asignatura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/books_3025.png"))); // NOI18N
        jMenuItem_Asignatura.setText("Asignatura");
        jMenuItem_Asignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AsignaturaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Asignatura);

        jMenuItem_Periodo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Periodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/mortarboard_icon-icons.com_64579.png"))); // NOI18N
        jMenuItem_Periodo.setText("Periodo");
        jMenuItem_Periodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_PeriodoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Periodo);

        jMenuItem_Aula.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Aula.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Aula.png"))); // NOI18N
        jMenuItem_Aula.setText("Aula");
        jMenuItem_Aula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AulaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Aula);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_guardar)
                                    .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_eliminar))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(91, 91, 91)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_NombreSeccion)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_NombreSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_IdSeccion)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_IdSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(128, 128, 128)
                                        .addComponent(lbl_horaInicial)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_HoraInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(140, 140, 140)
                                        .addComponent(lbl_horaFinal)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_HoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_CodAsignatura)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbo_Asignaturas, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_Periodo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbo_IdPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_aula)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbo_IdAula, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(473, 473, 473)
                .addComponent(lbl_titulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbl_titulo)
                                .addGap(82, 82, 82)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_IdSeccion)
                                    .addComponent(txt_IdSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_NombreSeccion)
                                    .addComponent(txt_NombreSeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_CodAsignatura)
                                    .addComponent(cbo_Asignaturas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_horaInicial)
                                    .addComponent(txt_HoraInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_horaFinal)
                                    .addComponent(txt_HoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_buscar)
                                .addGap(18, 18, 18)
                                .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbo_IdPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Periodo))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbo_IdAula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_aula))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
    
        String NombreSeccion = txt_NombreSeccion.getText() + " ";
           lbl_MensajeDias.setText(Mensaje);
             String Mensaje = "dias"; 
             
        if ((txt_NombreSeccion.getText().equals("")) || (txt_IdSeccion.getText().equals("")) || 
            (cbo_Asignaturas.getSelectedItem().equals("")) ||  (txt_HoraInicial.getText().equals("")) 
                    || (txt_HoraFinal.getText().equals(""))
                || (cbo_IdPeriodo.getSelectedItem().equals("Seleccione el período"))){
            
   
            javax.swing.JOptionPane.showMessageDialog(this,"¡Debe seleccionar la sección que desea actualizar! \n","¡AVISO!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
           txt_NombreSeccion.requestFocus();
            return;
        }
        
        else if(JOptionPane.showConfirmDialog(null, "¿Está seguro que desea actualizar el registro de secciones" +NombreSeccion + "?", "Confirmación de actualización", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE
        ) == JOptionPane.YES_OPTION) {
            String id_asignatura = cbo_Asignaturas.getSelectedItem().toString().substring(0, 2);
            String id_periodo = cbo_IdPeriodo.getSelectedItem().toString().substring(0, 6);
          String id_aula= cbo_IdAula.getSelectedItem().toString().substring(0, 7);
          
          
          try {
                PreparedStatement ps;
                ResultSet rs;
                ps = con.prepareStatement("Update Secciones set"
                      + " id_seccion = ? ,"
                    + " Nombre_seccion = ? ,"
                    + " cod_asignaturas = ? , "
                //    + " cantidad_alumnos = ? , "
                    + " Hora_inicial = ? ,"
                         + " Hora_final= ? ,"
                          + " id_periodo= ? ,"
                         + " id_aula = ? ,"
                         + " dias= ? "
                    + " where id_seccion =\'"+txt_IdSeccion.getText()+"\'");
                ps.setString(1, txt_IdSeccion.getText());
                  ps.setString(2, txt_NombreSeccion.getText());
                  ps.setString(3, id_asignatura);
             //     ps.setString(4, txt_CantidadAl.getText());
                  ps.setString(5, txt_HoraInicial.getText());
                  ps.setString(6, txt_HoraFinal.getText());
                  ps.setString(7, id_periodo);
                  ps.setString(8, id_aula);
                  ps.setString(9, Mensaje);
               
                int res = ps.executeUpdate();
            } catch (Exception e) {
                System.out.println(e);
            }

          //Contador
         int  Contador= 0;
         
         while(Contador<0 ){
             Contador = Contador +1;
         }
        }
        
    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        
         String Seccion = txt_NombreSeccion.getText() + " " + txt_IdSeccion.getText();
          
           if ((txt_NombreSeccion.getText().equals("")) || (txt_IdSeccion.getText().equals("")) || (txt_HoraInicial.getText().equals(""))   || (txt_HoraFinal.getText().equals(""))  ) {
          
            javax.swing.JOptionPane.showMessageDialog(this,"¡Debe seleccionar la seccion que desea eliminar! \n","¡AVISO!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
           
        }
          else if (JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar el registro de sección" + Seccion+ "", "Confirmación de eliminación",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE
        ) == JOptionPane.YES_OPTION) {

            try {
                Statement st2 = con.createStatement();
                String sql = "Delete Secciones "
                + "where id_seccion = (Select id_seccion from Secciones where Nombre_seccion = '"+txt_NombreSeccion.getText()+"')";

                int rs2 = st2.executeUpdate(sql);
                System.out.println(rs2);
                if(rs2 > 0){
                    JOptionPane.showMessageDialog(null, "Se ha borrado la información de la seccion" + Seccion+ " correctamente");

                }else {
                    JOptionPane.showMessageDialog(null, "¡Error al eliminar la información!");

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

        }
        actualizarDatos();
        LimpiarCajas();

        
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void btn_buscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_buscarMouseClicked
        rellenar();
        this.jScrollPane1.setEnabled(true);
        this.Tabla_Seccion.setEnabled(true);
    }//GEN-LAST:event_btn_buscarMouseClicked

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        actualizarDatos();

    }//GEN-LAST:event_btn_buscarActionPerformed

    private void chb_DomingoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chb_DomingoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chb_DomingoActionPerformed

    private void chb_MartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chb_MartesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chb_MartesActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
               
    
       //Contador
         int Contador=0;
  
    
         while(Contador<0 ){
             Contador = Contador +1;
         }
         
         String CantidadAl =String.valueOf(Contador);
        
        
        String cadena1, cadena2, cadena3, cadena4;
        cadena1 = txt_IdSeccion.getText();
        cadena2 = txt_NombreSeccion.getText();
       String codigo_asignatura = cbo_Asignaturas.getSelectedItem().toString().substring(0, 3);
        cadena3 = txt_HoraInicial.getText();
        cadena4 = txt_HoraFinal.getText();
        String id_periodo= cbo_IdPeriodo.getSelectedItem().toString().substring(0,6);
        String id_aula= cbo_IdAula.getSelectedItem().toString().substring(0,7);
        String Mensaje = "dias";
        
        if((txt_IdSeccion.getText().equals(""))){
            javax.swing.JOptionPane.showMessageDialog(this,"Debe ingresar el id de la sección.","Id sección requerido",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            txt_IdSeccion.requestFocus();
            return;
        }
        
            if((txt_NombreSeccion.getText().equals(""))){
            javax.swing.JOptionPane.showMessageDialog(this,"Debe ingresar el nombre de la sección.","Nombre sección requerido",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            txt_NombreSeccion.requestFocus();
            return;
        }
            
         if((cbo_Asignaturas.getSelectedItem().equals("Seleccione una asignatura"))){
            javax.swing.JOptionPane.showMessageDialog(this,"Debe seleccionar una asignatura para la sección.","Asignatura de la sección requerido",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
         
          if((txt_HoraInicial.getText().equals(""))){
            javax.swing.JOptionPane.showMessageDialog(this,"Debe ingresar la hora inicial de la sección.","Hora inicial requerido",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            txt_HoraInicial.requestFocus();
            return;
        }
        
           if((txt_HoraFinal.getText().equals(""))){
            javax.swing.JOptionPane.showMessageDialog(this,"Debe ingresar la hora final de la sección.","Hora final requerido",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            txt_HoraFinal.requestFocus();
            return;
        }
           
         if((cbo_IdPeriodo.getSelectedItem().equals("Seleccione un período"))){
            javax.swing.JOptionPane.showMessageDialog(this,"Debe seleccionar un período para la sección.","Período de la sección requerido",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
         
           if((cbo_IdAula.getSelectedItem().equals("Seleccione un aula"))){
            javax.swing.JOptionPane.showMessageDialog(this,"Debe seleccionar una para la sección.","Aula de la sección requerido",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
           
        if ((chb_Lunes.getText().equals("")) || (chb_Martes.getText().equals("")) || (chb_Miercoles.getText().equals("")) || (chb_Jueves.getText().equals("")) ||
             (chb_Viernes.getText().equals("")) || (chb_Sabado.getText().equals("")) || (chb_Domingo.getText().equals(""))) {

            javax.swing.JOptionPane.showMessageDialog(this,"¡Debe seleccionar el dia de la sección!. \n","¡AVISO!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            chb_Lunes.requestFocus();
            return;
        }
           
       try{
           
           //  ResultSet rs = st.executeQuery(sql);
            String verificar = "Select cantidad_alumnos from Secciones where Nombre_seccion = '"+txt_NombreSeccion.getText()+"'";
            Statement stmt = con.createStatement();
            ResultSet rs2 = stmt.executeQuery(verificar);
       if(rs2.next()){
                        String consul = "update Secciones \n" +
                                        "set cantidad_alumnos = 0\n" +
                                        "where Nombre_seccion = '"+txt_NombreSeccion.getText()+"'";
                        Statement ss = con.createStatement();
                        int actualizarcantidad_alumnos = ss.executeUpdate(consul);
                        //Secciones secciones = new Secciones(txt_NombreSeccion,rs2.getString(1));
                        Secciones secciones = new Secciones(txt_NombreSeccion,rs2.getString(1));
                        secciones.setVisible(true); 
                        this.dispose();
                        
      }else{
                    try {
                         String consulta = "SELECT * from Secciones where Nombre_seccion ='"+txt_NombreSeccion.getText()+"'";
                         Statement st3 = con.createStatement();
                         ResultSet rs3 = st3.executeQuery(consulta);
                        if(rs3.next()){
                            if(!rs3.getString("cantidad_alumnos").equals("1")){
                                if(rs3.getString("Nombre_seccion").equals(txt_NombreSeccion.getText())){
                                    getToolkit().beep();
                                    int in = Integer.parseInt(rs3.getString("cantidad_alumnos")) + 1 ;
                                    String sql4 = "update Secciones \n" +
                                                  "set cantidad_alumnos = '"+in+"'\n" +
                                                  "where Nombre_seccion = '"+txt_NombreSeccion.getText()+"' ";
                                    Statement st4 = con.createStatement();
                                    int rs4 = st4.executeUpdate(sql4);
                                    if(rs3.getString("cantidad_alumnos").equals("70")){
                                        Statement st2 = con.createStatement();
                                        String sql2 = "Update Secciones set cantidad_alumnos = 'Cantidad Maxima' where Nombre_seccion ='"+txt_NombreSeccion.getText()+"'";
                                        int columnas = st2.executeUpdate(sql2);
                                        JOptionPane.showMessageDialog(null, "La Seccion: "+txt_NombreSeccion.getText()+" excede su capacidad por favor comuníquese con el coordinador de la carrera.", "Limite Cupos", JOptionPane.INFORMATION_MESSAGE);
                                        this.dispose();
                                        return;
                                        
                                    }
                                }
                            }
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                    }

        if(existeSeccion()){
            return;
        }

        if(!validarLongitud(txt_IdSeccion,6)){
            JOptionPane.showMessageDialog(null, "El Id de seccion tiene que ser minimo de 6 caracteres", "Longitud de id sección", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if(!validarLongitud(txt_NombreSeccion,1)){
            JOptionPane.showMessageDialog(null, "El Nombre de la sección es muy corto el mínimo es de 1 caracteres", "Longitud del nombre de la sección", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
       
/*         if(!validarLongitud(CantidadAl,1)){
            JOptionPane.showMessageDialog(null, "La cantidad de alumnos debe ser de un mínimo de 2 caracter", "Longitud de las unidades valorativas", JOptionPane.INFORMATION_MESSAGE);
            return;
        }*/
         
         if(!validarLongitud(txt_HoraInicial,5)){
            JOptionPane.showMessageDialog(null, "La Hora inicial es muy corto el mínimo es de 5 caracteres", "Longitud de la hora inicial", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
       
         if(!validarLongitud(txt_HoraFinal,5)){
            JOptionPane.showMessageDialog(null, "La Hora final  debe ser de un mínimo de 5 caracter", "Longitud de la hora final", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try{
            PreparedStatement ps;


            ps=con.prepareStatement("INSERT INTO Secciones ( id_seccion, Nombre_seccion, cod_asignaturas, Hora_inicial, Hora_final, id_periodo, id_aula, dias)"
                + "                VALUES(?,?,?,?,?,?,?,?)");
            ps.setString(1, txt_IdSeccion.getText());
            ps.setString(2, txt_NombreSeccion.getText());
            ps.setString(3,codigo_asignatura);
            // CantidadAl =String.valueOf(Contador);
            ps.setString(4, txt_HoraInicial.getText());
            ps.setString(5, txt_HoraFinal.getText());
            ps.setString(6, id_periodo);
            ps.setString(7,id_aula);
            ps.setString(8, Mensaje);
            
            
            
            int res= ps.executeUpdate(); 
            JOptionPane.showMessageDialog(null, "Se ha guardado la información en Registro de Seccion");
             } catch ( Exception e) {
            System.out.println(e);
        
             JOptionPane.showMessageDialog(null, e.getMessage());
        }
        

        actualizarDatos();
        LimpiarCajas();
      } }
         catch (SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
        
     

      
    }//GEN-LAST:event_btn_guardarActionPerformed

    private void txt_IdSeccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_IdSeccionKeyTyped
    
             if (txt_IdSeccion.getText().length() >= 8) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Número máximo de caracteres admitidos");
        }
        if (evt.getKeyChar() == 8 || evt.getKeyChar() == 127
            || evt.getKeyChar() == 0 || evt.getKeyChar() == 3 || evt.getKeyChar() == 22
            || evt.getKeyChar() == 26 || evt.getKeyChar() == 24) {
            return;
        }
        char a = evt.getKeyChar();
        if (!Character.isLetterOrDigit(a)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Sólo letras y numeros");
        }
        
    }//GEN-LAST:event_txt_IdSeccionKeyTyped

    private void cbo_AsignaturasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbo_AsignaturasKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_cbo_AsignaturasKeyTyped

    private void btn_AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AceptarActionPerformed
        String Mensaje = "Dias:";
        if(chb_Lunes.isSelected()){
            Mensaje +=  "Lu";

        }
        if(chb_Martes.isSelected()){
            Mensaje +=  "Ma";
        }
        if(chb_Miercoles.isSelected()){
            Mensaje += "Mi";
        }
        if(chb_Jueves.isSelected()){
            Mensaje +=  "Ju";
        }
        if(chb_Viernes.isSelected()){
            Mensaje +=  "Vi";
        }
        
        if(chb_Sabado.isSelected()){
            Mensaje +=  "Sa";
        }
        if(chb_Domingo.isSelected()){
            Mensaje +=  "Do";
        }

        lbl_MensajeDias.setText(Mensaje);

    }//GEN-LAST:event_btn_AceptarActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem_PeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_PeriodoActionPerformed
           Periodo pp = null;
           pp = new Periodo();
        pp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem_PeriodoActionPerformed

    private void jMenuItem_AsignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AsignaturaActionPerformed
           Asignaturas as = null;
        try {
            as = new Asignaturas();
        } catch (SQLException ex) {
            Logger.getLogger(Asignaturas.class.getName()).log(Level.SEVERE, null, ex);
        }
        as.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem_AsignaturaActionPerformed

    private void jMenuItem_AulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AulaActionPerformed
           Aula au = null;
        try {
            au = new Aula();
        } catch (SQLException ex) {
            Logger.getLogger(Aula.class.getName()).log(Level.SEVERE, null, ex);
        }
        au.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem_AulaActionPerformed

    private void txt_HoraFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_HoraFinalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_HoraFinalActionPerformed

    private void txt_NombreSeccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_NombreSeccionKeyTyped
            char a=evt.getKeyChar();
            if (evt.getKeyChar() == 8 || evt.getKeyChar() == 127 || 
                 evt.getKeyChar() == 0 || evt.getKeyChar() == 3 || evt.getKeyChar() == 22 
                 || evt.getKeyChar() == 26 || evt.getKeyChar() == 24) {
        return;
        }
         /*if(evt.getKeyChar() == 32){
             if(txt_NombreSeccion.getText().length() == 0){
                 evt.consume();
                 Toolkit.getDefaultToolkit().beep();
                 return;
             }
             if(txt_NombreSeccion.getText().substring(txt_NombreSeccion.getText().length() - 1).equals(" ")){
                 evt.consume();
                 Toolkit.getDefaultToolkit().beep();
             }
             return; 
         }*/
        if(txt_NombreSeccion.getText().length() >=40){
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Número máximo de caracteres admitidos");
        }
        
        if(Character.isDigit(a) || !Character.isLetterOrDigit(a) ){
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Sólo letras");
        }
    }//GEN-LAST:event_txt_NombreSeccionKeyTyped

    private void cbo_IdPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbo_IdPeriodoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbo_IdPeriodoActionPerformed

    private void Tabla_SeccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabla_SeccionMouseClicked
           if(Tabla_Seccion.getSelectedRow () >= 0){
            llenarCampos();
        }
    }//GEN-LAST:event_Tabla_SeccionMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Secciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Secciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Secciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Secciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Secciones().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Secciones.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla_Seccion;
    private javax.swing.JButton btn_Aceptar;
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JComboBox<String> cbo_Asignaturas;
    private javax.swing.JComboBox<String> cbo_IdAula;
    private javax.swing.JComboBox<String> cbo_IdPeriodo;
    private javax.swing.JCheckBox chb_Domingo;
    private javax.swing.JCheckBox chb_Jueves;
    private javax.swing.JCheckBox chb_Lunes;
    private javax.swing.JCheckBox chb_Martes;
    private javax.swing.JCheckBox chb_Miercoles;
    private javax.swing.JCheckBox chb_Sabado;
    private javax.swing.JCheckBox chb_Viernes;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_Asignatura;
    private javax.swing.JMenuItem jMenuItem_Aula;
    private javax.swing.JMenuItem jMenuItem_Periodo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_CodAsignatura;
    private javax.swing.JLabel lbl_IdSeccion;
    private javax.swing.JLabel lbl_MensajeDias;
    private javax.swing.JLabel lbl_NombreSeccion;
    private javax.swing.JLabel lbl_Periodo;
    private javax.swing.JLabel lbl_aula;
    private javax.swing.JLabel lbl_horaFinal;
    private javax.swing.JLabel lbl_horaInicial;
    private javax.swing.JLabel lbl_titulo;
    private javax.swing.JFormattedTextField txt_HoraFinal;
    private javax.swing.JFormattedTextField txt_HoraInicial;
    private javax.swing.JTextField txt_IdSeccion;
    private javax.swing.JTextField txt_NombreSeccion;
    // End of variables declaration//GEN-END:variables

    
    public boolean existeSeccion(){
        try {
            Statement st = con.createStatement();
            String sql = "Select id_seccion from Secciones where id_seccion = '"+txt_IdSeccion.getText()+"'";
            ResultSet rs = st.executeQuery(sql);
            if(rs.next()){
                JOptionPane.showMessageDialog(null, "Ya existe esta Seccion: "+txt_IdSeccion.getText()+" ", "Id de Seccion ¡Ya existe!", JOptionPane.INFORMATION_MESSAGE);
                return true;
            }
            else{
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Empleado.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
       
           private boolean validarLongitud(JTextField texto, int longitud){
       if(texto.getText().length() >= longitud){
           return true;
       }
       else{
           return false;
       }
    }

    
    
public void actualizarDatos(){
        try {
               
               String sql = "SELECT * FROM Secciones";
               stmt = con.createStatement();
               ResultSet rs = stmt.executeQuery(sql);
               modelo = new DefaultTableModel(null, titulos);
               Tabla_Seccion.setModel(modelo);
                 while(rs.next()) {
                     
                     //Registro Anterior (Posible Error)//
                       String []datos= new String[9];
                      datos[0] =rs.getString("id_seccion");
                      datos[1] =rs.getString("Nombre_seccion");
                      datos[2] =rs.getString("cod_asignaturas");
                      //datos[3] =rs.getString("cantidad_alumnos");
                      datos[4] =rs.getString("Hora_inicial");
                      datos[5] =rs.getString("Hora_final");
                      datos[6] =rs.getString("id_periodo");
                     datos[7] =rs.getString("id_aula");
                      datos[8] =rs.getString("dias");
                      
                   
                   
                     modelo.addRow(datos);
                      
                      centrar_datos();
                 }
            TableColumn ids = Tabla_Seccion.getColumn(titulos[0]);
            ids.setMaxWidth(125);
            TableColumn nse= Tabla_Seccion.getColumn(titulos[1]);
            nse.setMaxWidth(165);
            TableColumn coda= Tabla_Seccion.getColumn(titulos[2]);
            coda.setMaxWidth(125);            
            TableColumn cana= Tabla_Seccion.getColumn(titulos[3]); //Puede ser este un error//
           cana.setMaxWidth(165);
           TableColumn hin= Tabla_Seccion.getColumn(titulos[4]);
           hin.setMaxWidth(165);
            TableColumn hfi= Tabla_Seccion.getColumn(titulos[5]);
           hfi.setMaxWidth(165);
           TableColumn idp= Tabla_Seccion.getColumn(titulos[6]);
           idp.setMaxWidth(165);
           TableColumn idau= Tabla_Seccion.getColumn(titulos[7]);
           idau.setMaxWidth(165);
           TableColumn dias= Tabla_Seccion.getColumn(titulos[8]);
           dias.setMaxWidth(165);
        }
        catch (Exception e) {
           
            System.err.println(e);
        }
           }

 public void centrar_datos() {
 
        DefaultTableCellRenderer modelocentrar = new DefaultTableCellRenderer();
        modelocentrar.setHorizontalAlignment(SwingConstants.CENTER);
         for (int i = 0; i <modelo.getRowCount(); i++) {
              Tabla_Seccion.getColumnModel().getColumn(i).setCellRenderer(modelocentrar);
             
         }

}
 
 private void rellenar(){
      try {
                    String cap = "";
                    ResultSet rs2 = null;
                   var = JOptionPane.showInputDialog(this, "Ingrese el nombre de la seccion que desea consultar", "Consulta de secciones", JOptionPane.QUESTION_MESSAGE);
                    if (var == null) {
                        JOptionPane.showMessageDialog(this, "La acción fue cancelada", "¡AVISO!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        if (var.equals("")) {
                            JOptionPane.showMessageDialog(this, "Favor de ingresar el nombre de la seccion \n que desea consultar", "¡AVISO!", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            String sql = "SELECT * FROM Secciones where id_seccion='"+var+"' or nombre_seccion ='"+var+"'";
                            stmt = con.createStatement();
                            rs2 = stmt.executeQuery(sql);

                            if (rs2.next()) {
                                txt_IdSeccion.setText(rs2.getString("id_seccion"));
                                txt_NombreSeccion.setText(rs2.getString("Nombre_seccion"));
                           //    CantidadAl =String.valueOf(Contador)(rs2.getString("cantidad_alumnos"));
                                txt_HoraInicial.setText(rs2.getString("Hora_inicial"));
                                txt_HoraFinal.setText(rs2.getString("Hora_final"));
                               
                                
                            } else {
                                JOptionPane.showMessageDialog(null, "¡No se encuentra los datos: "+var+" ! Por favor verifique sí, lo escribio correctamente");
                            }
                        }

                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
    
    }

     private void LimpiarCajas() {
       
         txt_IdSeccion.setText(null);
        txt_NombreSeccion.setText(null);
   //   CantidadAl =String.valueOf(Contador);
        txt_HoraInicial.setText(null);
         txt_HoraFinal.setText(null);
        cbo_Asignaturas.setSelectedIndex(0);
        cbo_IdPeriodo.setSelectedIndex(0);
        cbo_IdAula.setSelectedIndex(0);
       
    }
     
     private void llenarCampos() {
      int i = Tabla_Seccion.getSelectedRow();
        txt_IdSeccion.setText(Tabla_Seccion.getValueAt(i, 0).toString());
        txt_NombreSeccion.setText(Tabla_Seccion.getValueAt(i, 1).toString());
       // CantidadAl =String.valueOf(Contador).concat(Tabla_Seccion.getValueAt(i, 4).toString());
        txt_HoraInicial.setText(Tabla_Seccion.getValueAt(i, 5).toString());
          txt_HoraFinal.setText(Tabla_Seccion.getValueAt(i, 6).toString());      
         cbo_Asignaturas.setSelectedItem(Tabla_Seccion.getValueAt(i, 3).toString());
          cbo_IdPeriodo.setSelectedItem(Tabla_Seccion.getValueAt(i, 7).toString());
          cbo_IdAula.setSelectedItem(Tabla_Seccion.getValueAt(i, 8).toString());
          

    }
 
 
}
